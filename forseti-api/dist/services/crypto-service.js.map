{"version":3,"sources":["../../server/services/crypto-service.js"],"names":["CryptoService","projectId","keyRingId","cryptoKeyId","plaintextFileName","ciphertextFileName","fs","require","promisify","kms","client","KeyManagementServiceClient","locationId","readFile","contentsBuffer","console","log","plaintext","toString","name","cryptoKeyPath","encrypt","result","writeFile","Buffer","from","ciphertext","decrypt"],"mappings":"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","sourcesContent":["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* crypto-service */\nclass CryptoService {\n    constructor(\n        projectId = 'forseti-security-new',\n        keyRingId = 'test',\n        cryptoKeyId = 'quickstart') {\n\n        this.projectId = projectId;\n        this.keyRingId = keyRingId;\n        this.cryptoKeyId = cryptoKeyId;\n    }\n\n    async encrypt(\n        plaintextFileName = '/Users/garrettwong/Git/forseti-visualizer/forseti-api/dockersource.env',\n        ciphertextFileName = 'dockersource.env.enc'\n    ) {\n        const fs = require('fs');\n        const {\n            promisify\n        } = require('util');\n\n        // Import the library and create a client\n        const kms = require('@google-cloud/kms');\n        const client = new kms.KeyManagementServiceClient();\n\n        // The location of the crypto key's key ring, e.g. \"global\"\n        const locationId = 'global';\n\n        // Reads the file to be encrypted\n        const readFile = promisify(fs.readFile);\n        const contentsBuffer = await readFile(plaintextFileName);\n        console.log(contentsBuffer);\n\n        const plaintext = contentsBuffer.toString('base64');\n\n        console.log(plaintext);\n\n        const name = client.cryptoKeyPath(\n            this.projectId,\n            locationId,\n            this.keyRingId,\n            this.cryptoKeyId\n        );\n\n        // Encrypts the file using the specified crypto key\n        const [result] = await client.encrypt({\n            name,\n            plaintext\n        });\n        const writeFile = promisify(fs.writeFile);\n        await writeFile(ciphertextFileName, Buffer.from(result.ciphertext, 'base64'));\n        console.log(`Encrypted ${plaintextFileName} using ${result.name}.`);\n        console.log(`Result saved to ${ciphertextFileName}.`);\n\n        return Buffer.from(result.ciphertext, 'base64');\n    }\n\n    async decrypt(\n        ciphertextFileName = 'dockersource.env.enc',\n        plaintextFileName = 'dockersource.env.decrypted'\n    ) {\n        const fs = require('fs');\n        const {\n            promisify\n        } = require('util');\n\n        // Import the library and create a client\n        const kms = require('@google-cloud/kms');\n        const client = new kms.KeyManagementServiceClient();\n\n        // The location of the crypto key's key ring, e.g. \"global\"\n        const locationId = 'global';\n\n        // Reads the file to be decrypted\n        const readFile = promisify(fs.readFile);\n        const contentsBuffer = await readFile(ciphertextFileName);\n        const name = client.cryptoKeyPath(\n            this.projectId,\n            locationId,\n            this.keyRingId,\n            this.cryptoKeyId\n        );\n        const ciphertext = contentsBuffer.toString('base64');\n\n        // Decrypts the file using the specified crypto key\n        const [result] = await client.decrypt({\n            name,\n            ciphertext\n        });\n\n        // Writes the decrypted file to disk\n        const writeFile = promisify(fs.writeFile);\n        await writeFile(plaintextFileName, Buffer.from(result.plaintext, 'base64'));\n        console.log(\n            `Decrypted ${ciphertextFileName}, result saved to ${plaintextFileName}.`\n        );\n\n        console.log(Buffer.from(result.plaintext, 'base64').toString('utf8'));\n\n        return Buffer.from(result.plaintext, 'base64').toString('utf8');\n    }\n\n}\n\nexport default new CryptoService();"],"file":"crypto-service.js"}