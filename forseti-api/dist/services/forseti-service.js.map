{"version":3,"sources":["../../server/services/forseti-service.js"],"names":["ForsetiService","parentId","cb","parentIdSqlPhrase","console","log","sql","mySqlDbConn","getMySqlDbConnection","process","env","CLOUDSQL_HOSTNAME","CLOUDSQL_USERNAME","CLOUDSQL_PASSWORD","CLOUDSQL_SCHEMA","query","ex","inventoryIndexId","getInventoryIndexIdSqlStmt","iamPrefix","PROTO_PATH","grpc","require","protoLoader","packageDefinition","loadSync","keepCase","longs","String","enums","defaults","oneofs","protoDescriptor","loadPackageDefinition","explain","channel","FORSETI_SERVER_VM_CHANNEL","res","Explain","credentials","createInsecure","meta","Metadata","add","FORSETI_DATA_MODEL_HANDLE","getAccessByMembers","member_name","role","getAccessByPermissions","role_name","permission_name","getPermissionsByRoles","DatabaseServiceBase"],"mappings":"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","sourcesContent":["// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/* forseti-service */\nimport DatabaseServiceBase from './database-service-base.js';\n\nclass ForsetiService extends DatabaseServiceBase {\n    constructor() {\n        super()\n    }\n\n    /*\n     * @param cb \n        function (error, results, fields) {\n            if (error) throw error;\n            \n            console.log('durr', results, fields);\n\n            return results;\n        });\n     */\n    getResources(parentId, cb) {\n        // include parent and its children\n        let parentIdSqlPhrase = parentId ?\n            `AND (g.resource_id = '${parentId}' OR g.parent_id = \n                (SELECT id \n                    FROM gcp_inventory \n                    WHERE inventory_index_id = g.inventory_index_id AND\n                        category = 'resource' AND \n                        resource_id = '${parentId}'\n                )\n            )` : '';\n\n        console.log(parentIdSqlPhrase);\n\n        // GETS resources from the last successful inventory?\n        let sql = `\n        SELECT g.id, \n            g.resource_type, \n            g.category, \n            g.resource_id, \n            g.parent_id AS parent_id, \n            g.full_name AS full_name,\n            IFNULL(g.resource_data->>'$.displayName', '') as resource_data_displayname, \n            IFNULL(g.resource_data->>'$.name', '') as resource_data_name, g.resource_data->>'$.lifecycleState' as lifecycle_state,\n            g.inventory_index_id\n        FROM gcp_inventory g \n        WHERE g.inventory_index_id = (SELECT id \n                FROM inventory_index \n                WHERE inventory_status IN ('SUCCESS', 'PARTIAL_SUCCESS')\n                ORDER BY completed_at_datetime DESC LIMIT 1) \n            AND (g.category='resource') \n\n            AND g.resource_type IN ('organization', 'project', 'folder', \n                'appengine_app', 'kubernetes_cluster', 'cloudsqlinstance', 'instance', \n                'dataset', 'firewall', 'bucket', 'serviceaccount', 'serviceaccount_key', 'network')\n            \n            ${parentIdSqlPhrase}\n            \n            -- this will filter out DELETE_REQUESTED projects and the child resources under the DELETE_REQUESTED state resources\n            AND (g.resource_data->>'$.lifecycleState' != 'DELETE_REQUESTED' || g.resource_data->>'$.lifecycleState' is NULL)\n            AND (g.parent_id NOT IN (SELECT id FROM gcp_inventory gsub WHERE gsub.id = g.parent_id AND gsub.resource_data->>'$.lifecycleState' = 'DELETE_REQUESTED'))\n\n            ORDER BY CASE \n                WHEN g.resource_type = 'organization' THEN 0 \n                WHEN g.resource_type = 'folder' THEN 1 \n                WHEN g.resource_type = 'project' THEN 2 ELSE 3 END ASC;`;\n\n        try {\n            let mySqlDbConn = this.getMySqlDbConnection(\n                process.env.CLOUDSQL_HOSTNAME, \n                process.env.CLOUDSQL_USERNAME,\n                process.env.CLOUDSQL_PASSWORD,\n                process.env.CLOUDSQL_SCHEMA\n            );\n            mySqlDbConn.query(sql, cb);\n        } catch (ex) {\n            console.log(ex);\n        }\n    }\n\n    /**\n     * @desc gets violations in forseti database\n     * @param cb\n     *  function (error, results, fields) {\n            if (error) throw error;\n            \n            return results;\n        });\n     */\n    getViolations(inventoryIndexId, cb) {\n        let getInventoryIndexIdSqlStmt = `(SELECT id \n            FROM inventory_index \n            WHERE inventory_status IN ('SUCCESS', 'PARTIAL_SUCCESS') \n            ORDER BY completed_at_datetime DESC LIMIT 1)`;\n\n        if (inventoryIndexId !== null && inventoryIndexId > 0) {\n            getInventoryIndexIdSqlStmt = inventoryIndexId;\n        }\n\n        let sql = `\n        SELECT ii.id as inventory_index_id, si.id as scanner_index_id, v.* FROM violations v \n        JOIN scanner_index si\n        ON v.scanner_index_id = si.id\n        JOIN inventory_index ii\n        ON si.inventory_index_id = ii.id\n        WHERE ii.id = ${getInventoryIndexIdSqlStmt}`;\n\n        console.log('gv', inventoryIndexId, sql);\n\n        try {\n            let mySqlDbConn = this.getMySqlDbConnection(\n                process.env.CLOUDSQL_HOSTNAME, \n                process.env.CLOUDSQL_USERNAME,\n                process.env.CLOUDSQL_PASSWORD,\n                process.env.CLOUDSQL_SCHEMA\n            );\n            mySqlDbConn.query(sql, cb);\n        } catch (ex) {\n            console.log('getViolations', ex);\n        }\n    }\n\n    /**\n     * gets the iam explain of a given prefix\n     * @param {*} iamPrefix 'user/garrettwong@mycloud.com'\n     * @param {*} cb function for callback processing\n     */\n    getExplainIdentity(iamPrefix, cb) {\n        var PROTO_PATH = 'protos/explain.proto';\n        var grpc = require('grpc');\n        var protoLoader = require('@grpc/proto-loader');\n        // Suggested options for similarity to existing grpc.load behavior\n        var packageDefinition = protoLoader.loadSync(\n            PROTO_PATH, {\n                keepCase: true,\n                longs: String,\n                enums: String,\n                defaults: true,\n                oneofs: true\n            });\n        var protoDescriptor = grpc.loadPackageDefinition(packageDefinition);\n        // The protoDescriptor object has the full package hierarchy\n        var ex = protoDescriptor.explain;\n\n        let channel = process.env.FORSETI_SERVER_VM_CHANNEL;\n        let res = new ex.Explain(channel, grpc.credentials.createInsecure());\n\n        var meta = new grpc.Metadata();\n        meta.add('handle', process.env.FORSETI_DATA_MODEL_HANDLE);\n\n        console.log(ex);\n        console.log(res);\n        console.log('channel', channel);\n        console.log('channel', process.env.FORSETI_DATA_MODEL_HANDLE);\n\n        res.getAccessByMembers({\n            member_name: iamPrefix\n        }, meta, cb);\n    }\n\n    /**\n     * gets the iam explain of a given prefix\n     * @param {*} role ''\n     * @param {*} cb function for callback processing\n     */\n    getExplainRoles(role, cb) {\n        var PROTO_PATH = 'explain.proto';\n        var grpc = require('grpc');\n        var protoLoader = require('@grpc/proto-loader');\n        // Suggested options for similarity to existing grpc.load behavior\n        var packageDefinition = protoLoader.loadSync(\n            PROTO_PATH, {\n                keepCase: true,\n                longs: String,\n                enums: String,\n                defaults: true,\n                oneofs: true\n            });\n        var protoDescriptor = grpc.loadPackageDefinition(packageDefinition);\n        // The protoDescriptor object has the full package hierarchy\n        var ex = protoDescriptor.explain;\n\n        let channel = process.env.FORSETI_SERVER_VM_CHANNEL;\n        let res = new ex.Explain(channel, grpc.credentials.createInsecure());\n        console.log(res);\n\n        var meta = new grpc.Metadata();\n        meta.add('handle', process.env.FORSETI_DATA_MODEL_HANDLE);\n\n        res.getAccessByPermissions({\n            role_name: 'roles/owner',\n            permission_name: '',\n        }, meta, cb);\n\n        res.getPermissionsByRoles({\n            // role_names: ['roles/owner']\n            // role_prefixes: role_prefixes\n        }, meta, cb);\n    }\n\n    /*\n     * @param cb \n        function (error, results, fields) {\n            if (error) throw error;\n            \n            console.log('durr', results, fields);\n\n            return results;\n        });\n     */\n    getResourcesJson(cb) {\n        let sql = \"SELECT g.id, g.resource_type, g.category, g.resource_id, g.parent_id AS parent_id, IFNULL(g.resource_data->>'$.displayName', '') as resource_data_displayname, IFNULL(g.resource_data->>'$.name', '') as resource_data_name, g.resource_data->>'$.lifecycleState' as lifecycle_state FROM gcp_inventory g WHERE g.inventory_index_id = (SELECT id FROM inventory_index ORDER BY completed_at_datetime DESC LIMIT 1) AND (g.category='resource') AND g.resource_type IN ('organization', 'project', 'folder', 'appengine_app', 'kubernetes_cluster', 'cloudsqlinstance') ORDER BY CASE WHEN g.resource_type = 'organization' THEN 0 WHEN g.resource_type = 'folder' THEN 1 WHEN g.resource_type = 'project' THEN 2 ELSE 3 END ASC;\";\n\n        try {\n            let mySqlDbConn = this.getMySqlDbConnection(\n                process.env.CLOUDSQL_HOSTNAME, \n                process.env.CLOUDSQL_USERNAME,\n                process.env.CLOUDSQL_PASSWORD,\n                process.env.CLOUDSQL_SCHEMA\n            );\n            mySqlDbConn.query(sql, cb);\n        } catch (ex) {\n            console.log(ex);\n        }\n    }\n}\n\nexport default new ForsetiService();"],"file":"forseti-service.js"}